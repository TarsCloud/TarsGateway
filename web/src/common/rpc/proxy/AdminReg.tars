/**
 * Tencent is pleased to support the open source community by making Tars available.
 *
 * Copyright (C) 2016THL A29 Limited, a Tencent company. All rights reserved.
 *
 * Licensed under the BSD 3-Clause License (the "License"); you may not use this file except 
 * in compliance with the License. You may obtain a copy of the License at
 *
 * https://opensource.org/licenses/BSD-3-Clause
 *
 * Unless required by applicable law or agreed to in writing, software distributed 
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the 
 * specific language governing permissions and limitations under the License.
 */

#include "NodeDescriptor.tars"

module tars
{
    struct ServerStateDesc
    {
        0 require string settingStateInReg;
        1 require string presentStateInReg;
        2 require string presentStateInNode;
        3 require int processId;
        4 require string patchVersion;
        5 require string patchTime;
        6 require string patchUser;
    };
    
    enum tarsErrCode
    {
        //请求的node节点没有注册或者节点心跳超时
        EM_TARS_NODE_NOT_REGISTRY_ERR = 1001,
        //主控请求node节点超时
        EM_TARS_CALL_NODE_TIMEOUT_ERR = 1002,
        //从主控数据库获取服务的描述信息错误
        EM_TARS_LOAD_SERVICE_DESC_ERR = 1003,
        //服务可能处在停止或者发布过程中
        EM_TARS_SERVICE_STATE_ERR = 1004,
        //同样的请求已经在处理了
        EM_TARS_REQ_ALREADY_ERR = 1005,
        //请求来自非法的ip地址,如并非合法的主控地址
        EM_TARS_INVALID_IP_ERR = 1006,
        //参数错误
        EM_TARS_PARAMETER_ERR = 1007,
        //非tars方面的问题，用于node判断业务机器问题等
        EM_TARS_OTHER_ERR = 1008,
        //获取patch file异常
        EM_TARS_GET_PATCH_FILE_ERR = 1009,
        //调用patch server准备发布包失败
        EM_TARS_PREPARE_ERR = 1010,
        //不能执行
        EM_TARS_CAN_NOT_EXECUTE = 1011,
		//tarsnode没有连接
		EM_TARS_NODE_NO_CONNECTION = 1012,
		//未知错误
        EM_TARS_UNKNOWN_ERR = -1,
        //成功
        EM_TARS_SUCCESS = 0
    };

    /**
    * 管理平台过来的命令
    */
    enum EMTaskCommand
    {
        EM_CMD_START,
        EM_CMD_STOP,
        EM_CMD_PATCH,
        EM_CMD_UNINSTALL
    };

    /**
    * 任务的状态
    */
    enum EMTaskStatus {
        EM_T_NOT_START,
		EM_T_PREPARE,
		EM_T_RUNNING,
        EM_T_SUCCESS,
        EM_T_FAILED,
        EM_T_CANCEL,
        EM_T_PARIAL,
    };

    /**
    * 任务ITEM状态
    */
    enum EMTaskItemStatus
    {
        EM_I_NOT_START,
		EM_I_PREPARE,		//正在准备发布文件或镜像
		EM_I_RUNNING,
        EM_I_SUCCESS,
        EM_I_FAILED,
        EM_I_CANCEL,
        EM_I_PAUSE_FLOW,
    };

    /**
    * 异步任务
    */
    struct TaskItemReq
    {
        0 optional string taskNo;
        1 optional string itemNo;
        2 optional string application;
        3 optional string serverName;
        4 optional string nodeName;
        5 optional string setName;
        6 optional string command;
        7 optional string userName;
        8 optional map<string, string> parameters;
    };

    /**
    * 任务当前的信息
    */
    struct TaskItemRsp
    {
        0 optional TaskItemReq req;
        1 optional string  startTime;
        2 optional string  endTime;
        3 optional EMTaskItemStatus     status;
        4 optional string  statusInfo;
        5 optional string  executeLog;
        6 optional int     percent;
    };

    /**
    * Task任务
    */
    struct TaskReq
    {
        0 optional vector<TaskItemReq> taskItemReq;
        1 optional string taskNo;
        2 optional bool   serial;
        3 optional string userName;
        4 optional bool   isElegant = false;
        5 optional int    eachNum = 1;
    };

    struct TaskRsp
    {
        0 optional vector<TaskItemRsp> taskItemRsp;
        1 optional string taskNo;
        2 optional bool   serial;
        3 optional string userName;
        4 optional EMTaskStatus status;
        5 optional string createTime;
		6 optional string executeLog;
    };

    struct FrameworkServer
    {
        0 require string serverName;
        1 require string nodeName;
        2 require string objName;
    };

	struct ServerConf
	{
		0 optional string application;
		1 optional string serverName;
		2 optional string nodeName;
		3 optional string basePath;
		4 optional string exePath;
		5 optional string settingState = "active";
		6 optional string profile;
		7 optional string serverType;
		8 optional string startScript;
		9 optional string stopScript;
		10 optional string monitorScript;
		11 optional int asyncThreadNum = 3;
		12 optional string enableGroup = "M";		//N/Y
		13 optional string ipGroupName;		//N/Y
	};

	struct AdapterConf
	{
		0 optional string adapterName;
		1 optional int threadNum = 5;
		2 optional string endpoint;
		3 optional int maxConnections = 10240;
		4 optional string allowIp;
		5 optional string servant;
		6 optional int queuecap = 100000;
		7 optional int queuetimeout = 600000;
		8 optional string protocol = "tars";		//tars/not_tars
	};

	struct PluginConf
	{
	    0 optional string name;
	    1 optional string name_en;
	    2 optional string obj;
	    3 optional int    type;     //类型: 1, 全局插件; 2: 服务级别插件
	    4 optional string path;     //转发路径
	};

    /**
     * admin 管理接口
     */
    interface AdminReg
    {
		/**
		 * 长连接模式下, tarsnode上报自身
		 *
		 * @param nodeName   node名称(通常是IP, 要能被其他节点解析的地址)
		 * @param sid, sessionId, 客户端生成的唯一字符串
		 * @return 注册是否成功
		 */
		int reportNode(ReportNode rn);

		/**
		 * 长连接模式, 有代理的模式下, 同时tarsnode下线
		 *
		 * @param nodeName   node名称(通常是IP, 要能被其他节点解析的地址)
		 * @param sid, sessionId, 客户端生成的唯一字符串
		 * @return
		 */
		int deleteNode(ReportNode rn);

		/**
		 * tarsnode上报执行命令的结果
		 *
		 */
		int reportResult(int requestId, string funcName, int ret, string result);

        /**
         * 请求异步任务
         *
         * @param taskList : 任务列表
         * @param serial: 串行
         *
         * @return 0: 成功, <0:失败
         */
        int addTaskReq(TaskReq taskReq);

        /**
         * 获取任务状态
         *
         * @param taskIdList : 任务列表id
         *
         * @return 任务状态
         */
        int getTaskRsp(string taskNo, out TaskRsp taskRsp);

        /**
         * 获取根据应用, 服务, 命令字获取历史任务状态
         *
         * @param application : 应用名
         * @param serverName : 服务名
         * @param command : 命令字
         *
         * @return TaskRsp
         */
        int getTaskHistory(string application, string serverName, string command, out vector<TaskRsp> taskRsps);

        /**
        * 设置task item的信息(内部使用)
        * @param itemNo, itemno
        * @param startTime, 开始时间
        * @param endTime, 结束时间
        * @param status, 状态
        * @param log, 异常日志
        * @return int, 0: 成功, <0: 失败
        */
        int setTaskItemInfo(string itemNo, map<string, string> info);

        //////////////////////////////////////////////////////////////////////////////////
        /**
         * 获取application列表
         *
         * @param out result : 结果描述
         *
         * @return application列表
         */
        vector<string> getAllApplicationNames(out string result);

        /**
         * 获取node列表
         *
         * @param out result : 结果描述
         *
         * @return node 列表
         */
        vector<string> getAllNodeNames(out string result);

        /**
         * ping node
         *
         * @param name: node id
         * @param out result : 结果描述
         *
         * @return : true-ping通；false-不通
         */
        bool pingNode(string name, out string result);

        /**
         * get node version
         *
         * @param name: node id
         * @param out version ：版本
         * @param out result : 结果描述
         *
         * @return : 0-成功 others-失败
         */
        int getNodeVesion(string name, out string version, out string result);

        /**
         * 停止 node
         *
         * @param name: node id
         * @param out result : 结果描述
         *
         * @return : 0-成功 others-失败
         */
        int shutdownNode(string name, out string result);

        /**
         * 获取server列表
         *
         * @param name: null
         * @param out result : 结果描述
         *
         * @return: server列表及相关信息
         */
        vector<vector<string> > getAllServerIds(out string result);

        /**
         * 获取特定server状态
         *
         * @param application: 应用
         * @param serverName : server名
         * @param nodeNmae   : node id
         * @param out state  : 状态
         * @param out result : 结果描述
         *
         * @return : 返回值详见tarsErrCode枚举值
         */
        int getServerState(string application,string serverName, string nodeName, out ServerStateDesc state, out string result);

        /**
         * 获取某ip所属group 用于机房部署  例如某ip属于那个机房
         *
         * @param nodeNmae   : ip
         * @param out int    : group id
         * @param out result : 结果描述
         *
         * @return : 处理结果
         */
        int getGroupId(string ip, out int groupId, out string result);

        /**
         * 启动特定server
         *
         * @param application: 应用
         * @param serverName : server名
         * @param nodeName   : node id
         * @param out result : 结果描述
         *
         * @return : 返回值详见tarsErrCode枚举值
         */
        int startServer(string application,string serverName, string nodeName, out string result);

        /**
         * 停止特定server
         *
         * @param application: 应用
         * @param serverName : server名
         * @param nodeName   : node id
         * @param out result : 结果描述
         *
         * @return : 返回值详见tarsErrCode枚举值
         */
        int stopServer(string application,string serverName, string nodeName, out string result);

        /**
         * 重启特定server
         *
         * @param application: 应用
         * @param serverName : server名
         * @param nodeName   : node id
         * @param out result : 结果描述
         *
         * @return : 返回值详见tarsErrCode枚举值
         */
        int restartServer(string application,string serverName, string nodeName, out string result);

		/**
		 * 从Node上删除特定server
		 *
		 * @param application: 应用
		 * @param serverName : server名
		 * @param nodeName   : node id
		 * @param out result : 结果描述
		 *
		 * @return : 返回值详见tarsErrCode枚举值
		 */
		int destroyServer(string application,string serverName, string nodeName, out string result);

        /**
         * 通知server
         *
         * @param application: 应用
         * @param serverName : server名
         * @param nodeName   : node id
         * @param command    : 命令
         * @param out result : 结果描述
         *
         * @return : 返回值详见tarsErrCode枚举值
         */
        int notifyServer(string application,string serverName, string nodeName, string command, out string result);

        /**
        * 发布服务
        * @param req
        * @return 0: 成功, <0: 失败
        */        
        int batchPatch(PatchRequest req, out string result);
        
        /**
        * 卸载服务
        * @param application
        * @param serverName
        * @param nodeName
        * @return 0: 成功, <0: 失败
        */
        int undeploy(string application, string serverName, string nodeName, string user,  out string log);

        /**
         * 更新发布状态
         *
         *
         * @return : 返回值详见tarsErrCode枚举值
         */
        int updatePatchLog(string application, string serverName, string nodeName, string patchId, string user, string patchType, bool succ);

        /**
        * 获取服务发布进度
        * @param application  : 服务所属应用名
        * @param serverName   : 服务名
        * @param nodeName     : node id
        * @out tPatchInfo     ：发布信息
        *
        * @return : 返回值详见tarsErrCode枚举值
        */
        int getPatchPercent(string application,string serverName,string nodeName,out PatchInfo tPatchInfo);

		/**
		*备份和删除cache的共享内存
		*@param sFullCacheName cache服务全名
				*@param sBackupPath  备份路径
		*@param sKey  共享内存的key值，如果为空则通过路径和‘D’生成
		*@return int
		*/
		int delCache(string nodeName, string sFullCacheName,string sBackupPath, string sKey, out string result);

        /**
         * 加载特定server
         *
         * @param application: 应用
         * @param serverName : server名
         * @param nodeName   : node id
         * @param out result : 结果描述
         *
         * @return : 返回值详见tarsErrCode枚举值
         */
        int loadServer(string application, string serverName, string nodeName, out string result);

        /**
         * 获取相应模板
         *
         * @param profileName: 模板名称
         * @param out profileTemplate: 模板内容
         * @param out resultDesc: 结果描述
         *
         * @return : 0-成功 others-失败
         */
        int getProfileTemplate(string profileName , out string profileTemplate, out string resultDesc);

        /**
         * 获取服务相应模板
         *
         * @param application: 应用
         * @param serverName : server名
         * @param nodeName   : node id
         * @param out profileTemplate: 模板内容
         * @param out resultDesc: 结果描述
         *
         * @return : 0-成功 others-失败
         */
        int getServerProfileTemplate(string application, string serverName, string nodeName, out string profileTemplate, out string resultDesc);

        /**
         * node通过接口获取连接上主控的node ip
         * @param sNodeIp:  node 的ip
         *
         * @return 0-成功 others-失败
         */
        int getClientIp(out string sClientIp);
    
        /**
         *  获取日志文件列表
         *
         * @param application: 应用
         * @param serverName : server名
         * @param nodeName   : node id
         * @param out result : 结果描述
         *
         * @return : 返回值详见tarsErrCode枚举值
         */
        int getLogFileList(string application, string serverName, string nodeName, out vector<string> logFileList);

        /**
         *  获取日志文件内容
         *
         * @param application: 应用
         * @param serverName : server名
         * @param nodeName   : node id
         * @param logFile   : 日志文件
         * @param cmd   : 命令信息
         * @param out fileData : 结果描述
         *
         * @return : 返回值详见tarsErrCode枚举值
         */
        int getLogData(string application, string serverName, string nodeName, string logFile, string cmd, out string fileData);

        /**
         * 获取某台服务器的基本负载情况
         */
        int getNodeLoad(string application, string serverName, string nodeName, int pid, out string fileData);

        /**
        * 删除发布包
        * @param application  : 服务所属应用名
        * @param serverName   : 服务名
        * @param patchFile: patchFile
        *
        * @return : 0-成功 others-失败
        */
        int deletePatchFile(string application,string serverName, string patchFile);

        /**
        * get server need check
        *
        * @return : 0-成功 others-失败
        */
        int getServers(out vector<FrameworkServer> servers);

        /**
        * 检查框架的联通性
        *
        * @return : 0-成功 others-失败
        */
        int checkServer(FrameworkServer server);

        /**
        * 获取framework的version
        *
        * @return : 0-成功 others-失败
        */
        int getVersion(out string version);

        /**
		 * 暂停服务，关闭服务流量，无损发布用等
		 *
		 * @return : 0-成功 others-失败
		 */
		int updateServerFlowState(string application, string serverName, vector<string> nodeList, bool bActive);

		/**
		 * 强制node执行docker登录逻辑
		 * @return 0: 成功, others: 失败
		 */
		int forceDockerLogin(string nodeName, out vector<string> result);

		/**
		 * 检查是否登录镜像仓库
		 *
		 * @params result: 是否可以登录仓库
		 */
		int checkDockerRegistry(string registry, string userName, string password, out string result);

		/**
		 * 调用某台主控, 拉取基础镜像
		 * @params result: 返回信息
		 */
		int dockerPull(string baseImageId);

		/**
		 * 获取tarsnode长连接心跳
		 * @params nodeNames: 节点信息
		 * @params heartbeats: 心跳信息<节点名称, 心跳时间>
		 */
		int getNodeList(vector<string> nodeNames, out map<string, string> heartbeats);

        /**
         * 卸载服务(从数据库中删除数据)
         *
         * @param application: 应用
         * @param serverName : server名
         * @param nodeName   : node id
         * @param out result : 结果描述
         *
         * @return : 返回值详见tarsErrCode枚举值
         */
        int uninstallServer(string application, string serverName, string nodeName, out string result);

        /**
         * 是否有服务
         *
         * @param application: 服务基本信心 
         * @param serverName: 是否替换
         * @return : 返回值详见tarsErrCode枚举值
         */
        int hasServer(string application, string serverName, out bool has);

        /**
         * 新增服务
         *
         * @param conf: 服务基本信心 
         * @param replace: 是否替换(false时, 如果有冲突就insert失败)
         * @return : 返回值详见tarsErrCode枚举值
         */
        int insertServerConf(ServerConf conf,  bool replace);

        /**
         * 新增adapter
         *
         * @param conf: 服务基本信心 
         * @param replace: 是否替换(false时, 如果有冲突就insert失败)
         * @return : 返回值详见tarsErrCode枚举值
         */
        int insertAdapterConf(string sApplication, string serverName, string nodeName, AdapterConf conf, bool replace);

		/**
		 * 新增配置文件
		 *
		 * @param replace: 是否替换(false时, 如果有冲突就insert失败)
		 * @return : 返回值详见tarsErrCode枚举值
		 */
		int insertConfigFile(string sFullServerName, string fileName, string content, string nodeName, int level, bool replace);

		/**
		 * 获取配置文件ID
		 *
		 * @return : 返回值详见tarsErrCode枚举值
		 */
		int getConfigFileId(string sFullServerName, string fileName, string nodeName, int level, out int configId);

		/**
		 * 新增配置文件
		 *
		 * @param replace: 是否替换(false时, 如果有冲突就insert失败)
		 * @return : 返回值详见tarsErrCode枚举值
		 */
		int insertHistoryConfigFile(int configId, string reason, string content, bool replace);

        ////////////////////////////////////////////////////////////////////////////////////////////////
        //以下接口调用的db_user_system, 默认在和db_tars在同一台机器上!主要给业务扩展web管理平台使用

		/**
		 * 注册插件
		 *
		 * @return : 返回值详见tarsErrCode枚举值
		 */
        int registerPlugin(PluginConf conf);

		/**
		 * 是否有有开发权限
		 *
		 * @return : 返回值详见tarsErrCode枚举值
		 */
		int hasDevAuth(string application, string serverName, string uid, out bool has);

		/**
		 * 是否有运维权限
		 *
		 * @return : 返回值详见tarsErrCode枚举值
		 */
		int hasOpeAuth(string application, string serverName, string uid, out bool has);

		/**
		 * 是否有有管理员权限
		 *
		 * @return : 返回值详见tarsErrCode枚举值
		 */
		int hasAdminAuth(string uid, out bool has);

		/**
		 * 解析ticket, uid不为空则有效, 否则无效需要重新登录
		 *
		 * @return : 返回值详见tarsErrCode枚举值
		 */
		int checkTicket(string ticket, out string uid);

    };
};

